vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(planets)
class(plants)
dim)plants
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE, prob=c(0.3,0.7))
flis<-sample(c(0,1),100,replace=TRUE, prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,100,0.7)
flips2<-rbinom(1,100,0.7)
flips2<-rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,c(10))
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
matrix(1:10, nrow=2, ncol=5)
mx<-matrix(1:10, nrow=2, ncol=5)
mx
cacheSolve(mx)
slove(mx)
solve(mx)
mx<-matrix(1:16, nrow=4, ncol=4)
mx
solve(mx)
?solve
mx<-rbind(c(1, -1/4), c(-1/4, 1))
mx
slove(mx)
solve(mx)
mx%*%solve(mx)
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/test.R')
cacheman(c(1,2,3,4,5))
cachemean(c(1,2,3,4,5))
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
debug(cacheSolve)
cacheSolve(mx)
class(mx)
makeCacheMatrix(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
mx2<-makeCacheMatrix(mx)
cacheSolve(mx2)
mx2%*%mx
mx3<-cacheSolve(mx2)
mx3%*%mx2
mx3%*%mx
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
cacheSolve(mx2)
ls
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
list(set = set, get = get, setinv = setinv, getinv = getinv)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mx)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
cachesolve(mat1)
cacheSolve(mat1)
cacheSolve(mat1)
cacheSolve(as.matrix(mat1))
as.matrix(mat1)
as.matrix(mx)
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/ProgrammingAssignment2/cachematrix.R')
library(swirl)
swirl()
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
getwd()
setwd("C:\\Users\\Ido\\Documents\\GitHub\\school\\02_DataScience\\02_RProgramming\\Ex3")
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
str(outcome)
summary(outcome)
mix(outcome)
dim(outcome)
nmae(outcome)
names(outcome)
outcome[,11]<-as.numeric(coutcome[,11])
outcome[,11]<-as.numeric(outcome[,11])
his(outcome)
hist(outcome)
hist(outcome[,11])
?any
?stop
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome<-"asdf"
state<-"IL"
if (!state %in% fl$State) stop("invalid state")
state<-"XX"
if (!state %in% fl$State) stop("invalid state")
state<-"CA"
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) stop("invalid outcome")
outcome<-"pneumonia"
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) stop("invalid outcome")
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
lst<-filter(fl,fl$State==state)
lst
?filter
lst<-fl[ fl$State == state, ]
lst
lst$State
sapply(lst[outcome], min)
lst[outcome]
lst[[outcome]]
lst["pneumonia"]
min(lst[,2])
data<-fl[ fl$State == state, ]
min(data[,outcome])
data[,outcome]
min(data$outcome)
data[[outcome]]
names(data)
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
?sapply
p<- data.frame(param = c("heart attack", "heart failure", "pneumonia")
val=c(15,17,27))
p<- data.frame(param = c("heart attack", "heart failure", "pneumonia") val=c(15,17,27))
p<- data.frame(param = c("heart attack", "heart failure", "pneumonia") val=c(15,17,27))
p<- data.frame(param = c("heart attack", "heart failure", "pneumonia") v=c(15,17,27))
p<- data.frame(param = c("heart attack", "heart failure", "pneumonia"), val=c(15,17,27))
p
?match
p$val[p$param=15]
p$val[p$param==15]
p$val[p$param=="pneumonia"]
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
cl <-p$val[p$param==outcome]
cl
lst[cl]
min(lst[cl])
min(lst[cl],na.rm = T)
lst[cl]
as.integer(lst[cl])
as.integer(lst[cl])
?as.integer
as.integer("5")
as.integer("A")
sapply(as.integer(lst[cl]), min, na.rm=TRUE)
data
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
state<-"CA"
outcome<-"heart failure"
data<-fl[ fl$State == state, ]
head(data)
p <- data.frame(param = c("heart attack", "heart failure", "pneumonia"),
val=c(15,17,27))
cl <-p$val[p$param==outcome]
data[cl]
as.integer(data[cl])
data[cl]
as.vector(data[cl])
na.omit(as.integer(c("1","B")))
(as.integer(c("1","B")))
(as.integer(c("1","BDD")))
data<-as.integer(data)
data<-as.integer(as.vector(data))
as.vector(data)
(as.integer(c("1","BDxcvzxcvzD")))
?comlpete.cases
?complete.cases
?complete.cases(as.integer(c("1","ASDASDAD")))
complete.cases(as.integer(c("1","ASDASDAD")))
data_cl <- as.numeric(data[,cl])
data_cl
data_cl[!is.na(data_cl)]
data<-data_cl[!is.na(data_cl)]
data
data<-fl[ fl$State == state, ]
head(data)
?sapply
sapply(fl,fl$state==state & is.numeric(as.numeric(data[,cl])))
fl$state==state & is.numeric(as.numeric(data[,cl]))
fl$state==state
fl[fl$state==state]
sate
state
fl
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(fl)
names(fl)
data<-fl[ fl$State == state, ]
names(data)
dim(data)
fl[ fl$State == state, ]
fl[ fl$State == state & !is.na(as.numeric(fl[cl])), ]
as.numeric(fl[cl])
fl[cl]
data<-fl[ fl$State == state, ]
data_cl <- !is.na(as.numeric(data[,cl]))
data_cl
data<-data[data_cl,]
data
dim(data)
data[cl]
data[data[cl]==min(data[cl])]
min(data[cl])
data[cl]
min(c(data[cl]))
min(as.vector(data[cl]))
min(data[cl],na.rm = T)
mindata(,cl)
data[,cl]
data[cl]
calss(data[cl])
class(data[cl])
names(data)
typeof(data[cl])
v<-as.numeric(data[,cl])
v
rows<-which(v==min(v))
rows
hospital<-data[rows,2]
hospital
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
best("TX", "heart attack")
state<-"TX"
outcome<-"heart attack"
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
p <- data.frame(param = c("heart attack", "heart failure", "pneumonia"),
val=c(15,17,27))
cl <-p$val[p$param==outcome]
data<-fl[ fl$State == state, ]
data_cl <- !is.na(as.numeric(data[,cl]))
data<-data[data_cl,]
v<-as.numeric(data[,cl])
rows<-which(v==min(v))
hospital<-data[rows,2]
hospital<-sort(hospital)
hospital[1]
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
best("TX", "heart attack")
best("TX", "heart attack")
hospital<-data[rows,2]
hospital
sort(hospital)
names(data[cl])
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("BB", "heart attack")
best("NY", "hert attack")
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/ex.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/best.R')
submit()
submit()
submit()
submit()
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/best.R')
data[,cl]<-supressWarnings(as.numeric(data[,cl]))
data[,cl]<-suppressWarnings(as.numeric(data[,cl]))
data<-data[order(data[cl],data[2]),]
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/best.R')
best("NY", "hert attack")
best("NY", "heart attack")
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/best.R')
num="4"
as.integer(num)
is.integer(as.integer(num))
num="CC"
is.integer(as.integer(num))
is.na(as.integer(num))
!is.na(as.integer(num))
num="4"
!is.na(as.integer(num))
?order
satate='TX'
state='CA'
outcome="heart failure"
num=5
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (!state %in% fl$State) stop("invalid state")
!outcome %in% c("heart attack", "heart failure", "pneumonia")
p <- data.frame(param = c("heart attack", "heart failure", "pneumonia"),
val=c(11,17,23))
cl <-p$val[p$param==outcome]
data<-fl[ fl$State == state, ]
data_cl <- !is.na(as.numeric(data[,cl]))
data<-data[data_cl,]
data[,cl]<-as.numeric(data[,cl]
data[,cl]<-as.numeric(data[,cl])
head(data[,cl])
length(data)
newdata <- data[data(data[,cl], data[2]),]
data[,cl]
data[2]
names(data[,cl])
names(data[cl])
data[order(names(data[cl])), names(data[2])),]
data[order(names(data[cl]), names(data[2])),]
new_data<-data[order(names(data[cl]), names(data[2])),]
head(new_data[,c(2,17)])
head(new_data[,c(2,17)],10)
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
cl
data<-fl[ fl$State == state, ]
n
num
if(num=="best") n<-1
else if (num=="worst") n<-lengtn(data)
else if (!is.na(as.integer(num))) n<-as.integer(num)
else stop("invalid rank")
if(num=="best") n<-1
n
if (num=="worst") n<-lengtn(data)
n
if (!is.na(as.integer(num))) n<-as.integer(num)
n
data_cl <- !is.na(as.numeric(data[,cl]))
data<-data[data_cl,]
data[,cl]<-as.numeric(data[,cl])
if (n>length(data)) return (NA)
>length(data)
length(data)
length(data)
dim(data
)
nrow(data)
data <- data[order(names(data[cl]), names(data[2])),]
data<-fl[ fl$State == state, ]
data_cl <- !is.na(as.numeric(data[,cl]))
data<-data[data_cl,]
data[,cl]<-as.numeric(data[,cl])
data[order(names(data[cl]), names(data[2])),]
data <- data[order(names(data[cl]), names(data[2])),]
data[order(names(data[cl]), names(data[2])),]
dim(data)
data<-fl[ fl$State == state, ]
data_cl <- !is.na(as.numeric(data[,cl]))
data<-data[data_cl,]
data[,cl]<-as.numeric(data[,cl])
dim(data[order(names(data[cl]), names(data[2])),])
dim(data)
dim(data[,])
dim(data[order(data[1]),])
dim(data[order(data[1],data[2])
dim(data[order(data[1],data[2]))
dim(data[order(data[1],data[2]))]
dim(data[order(data[1],data[2])],)
dim(data[order(data[1],data[2]),])
dim(data[order(names(data[cl]),data[2]),])
dim(data[order(data[cl], names(data[2])),])
dim(data[order(data[cl], data[2]),])
data <- data[order(data[cl], data[2]),]
head(data[c(2,17),])
head(data[,17])
head(data[,c(2,17])
head(data[,c(2,17)])
if(num=="best") n<-1
n
n>nrow(data)
nrow(data)
data[n,cl
data[n,cl]
data[n,2]
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
data_cl <- !is.na(as.numeric(data[,cl]))
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/best.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", "best")
rankhospital("MN", "heart attack", "bes")
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankhospital.R')
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/best.R')
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankhospital.R')
View(rankhospital)
View(submit)
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankhospital.R')
fl<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome<-"pneumonia"
num=5
num="5"
p <- data.frame(param = c("heart attack", "heart failure", "pneumonia"),
val=c(11,17,23))
cl <-p$val[p$param==outcome]
data[,cl]<-suppressWarnings(as.numeric(data[,cl]))
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,cl]<-suppressWarnings(as.numeric(data[,cl]))
?split
split(data,data[2])
split(data,data[7])
split(head(data),data[7])
split((data[1:10,]),data[7])
lappy(split(data[1:50,c(2,7,15)],data[7]),rank)
lapply(split(data[1:50,c(2,7,15)],data[7]),rank)
lapply(split(data[1:10,c(2,7,15)],data[7]),rank)
rank(data[1:10,2,7,23])
rank(data[1:10,c(2,7,23)])
rank(data[1:10,c(23)])
nd<-split(data,data[7])
head(nd)
rank(nd[23])
class(nd)
sapply(split(data,data[7]),rank)
sapply(split(data[1:30,c(7,23)],data[7]),rank)
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankall.R')
head(rankall("heart attack", 20), 10)
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,cl]<-suppressWarnings(as.numeric(data[,cl]))
data <- data[order(data[7], data[cl], data[2], na.last=NA),]
data[!is.na(outcome)]
data <- data[!is.na(outcome)]
l <- split(data[,2], data[7])
result <- lapply(l, rankHospitals, num)
rankHospitals <- function(x, num) {
if (num=="best") {
head(x, 1)
} else if (num=="worst") {
tail(x, 1)
} else {
x[num]
}
}
result <- lapply(l, rankHospitals, num)
data.frame(hospital = unlist(result), state = names(result), row.names = names(result))
source('~/GitHub/school/02_DataScience/02_RProgramming/Ex3/rankall.R')
head(rankall("heart attack", 20), 10)
rankall("heart attack", 20)
debug (rankall)
rankall("heart attack", 20)
undebug(rankall)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
